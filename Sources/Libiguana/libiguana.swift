// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(libiguanaFFI)
import libiguanaFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_libiguana_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_libiguana_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol IguanaEnvironmentProtocol : AnyObject {
    
    func compileAasm(aasmPath: String) throws  -> AasmOutput
    
    func continueExecution() throws 
    
    func createBreakpoint(memoryAddress: UInt32) throws 
    
    func currentKmd()  -> [KmdparseToken]?
    
    /**
     * Kills the underlying jimulator process. This function should not be used from within Rust -
     * `IguanaEnvironment` implements `Drop` and handles killing the process for you. This exists
     * because for some reason `Drop` isn't working through `uniffi`.
     */
    func killJimulator() throws 
    
    /**
     * Loads the given .kmd file. [`kmd`] is an unparsed string - parsing is handled by this
     * function.
     */
    func loadKmd(kmd: String) throws 
    
    func pause() throws 
    
    func ping() throws  -> String
    
    func readMemory(address: UInt32) throws  -> UInt32
    
    func registers() throws  -> Registers
    
    func removeBreakpoint(trapNumber: UInt8) throws 
    
    func reset() throws 
    
    /**
     * Starts execution, with the given step limit. If the step limit is 0, the emulator will
     * execute indefinitely.
     */
    func startExecution(steps: UInt32) throws 
    
    func status() throws  -> BoardState
    
    func stopExecution() throws 
    
    func terminalMessages() throws  -> Data
    
    func traps()  -> [UInt32: UInt8]
    
    func writeMemory(word: Data, address: UInt32) throws 
    
    func writeToTerminal(message: Data) throws 
    
}

public class IguanaEnvironment:
    IguanaEnvironmentProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_libiguana_fn_clone_iguanaenvironment(self.pointer, $0) }
    }
    /**
     * Creates a new environment.
     *
     * While `jimulator_path` can be anything that resolves to a jimulator executable (by that, I
     * mean you can just put `jimulator` if it is in your PATH), `aasm_path` must be an absolute
     * path to an `aasm` executable. There must also be a file called `mnemonics` in the same
     * directory.
     */
    public convenience init(jimulatorPath: String, aasmPath: String, mnemonicsPath: String) throws  {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_constructor_iguanaenvironment_new(
        FfiConverterString.lower(jimulatorPath),
        FfiConverterString.lower(aasmPath),
        FfiConverterString.lower(mnemonicsPath),$0)
})
    }

    deinit {
        try! rustCall { uniffi_libiguana_fn_free_iguanaenvironment(pointer, $0) }
    }

    

    
    
    public func compileAasm(aasmPath: String) throws  -> AasmOutput {
        return try  FfiConverterTypeAasmOutput.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_compile_aasm(self.uniffiClonePointer(), 
        FfiConverterString.lower(aasmPath),$0
    )
}
        )
    }
    public func continueExecution() throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_continue_execution(self.uniffiClonePointer(), $0
    )
}
    }
    public func createBreakpoint(memoryAddress: UInt32) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_create_breakpoint(self.uniffiClonePointer(), 
        FfiConverterUInt32.lower(memoryAddress),$0
    )
}
    }
    public func currentKmd()  -> [KmdparseToken]? {
        return try!  FfiConverterOptionSequenceTypeKmdparseToken.lift(
            try! 
    rustCall() {
    
    uniffi_libiguana_fn_method_iguanaenvironment_current_kmd(self.uniffiClonePointer(), $0
    )
}
        )
    }
    /**
     * Kills the underlying jimulator process. This function should not be used from within Rust -
     * `IguanaEnvironment` implements `Drop` and handles killing the process for you. This exists
     * because for some reason `Drop` isn't working through `uniffi`.
     */
    public func killJimulator() throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_kill_jimulator(self.uniffiClonePointer(), $0
    )
}
    }
    /**
     * Loads the given .kmd file. [`kmd`] is an unparsed string - parsing is handled by this
     * function.
     */
    public func loadKmd(kmd: String) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_load_kmd(self.uniffiClonePointer(), 
        FfiConverterString.lower(kmd),$0
    )
}
    }
    public func pause() throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_pause(self.uniffiClonePointer(), $0
    )
}
    }
    public func ping() throws  -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_ping(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func readMemory(address: UInt32) throws  -> UInt32 {
        return try  FfiConverterUInt32.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_read_memory(self.uniffiClonePointer(), 
        FfiConverterUInt32.lower(address),$0
    )
}
        )
    }
    public func registers() throws  -> Registers {
        return try  FfiConverterTypeRegisters.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_registers(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func removeBreakpoint(trapNumber: UInt8) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_remove_breakpoint(self.uniffiClonePointer(), 
        FfiConverterUInt8.lower(trapNumber),$0
    )
}
    }
    public func reset() throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_reset(self.uniffiClonePointer(), $0
    )
}
    }
    /**
     * Starts execution, with the given step limit. If the step limit is 0, the emulator will
     * execute indefinitely.
     */
    public func startExecution(steps: UInt32) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_start_execution(self.uniffiClonePointer(), 
        FfiConverterUInt32.lower(steps),$0
    )
}
    }
    public func status() throws  -> BoardState {
        return try  FfiConverterTypeBoardState.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_status(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func stopExecution() throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_stop_execution(self.uniffiClonePointer(), $0
    )
}
    }
    public func terminalMessages() throws  -> Data {
        return try  FfiConverterData.lift(
            try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_terminal_messages(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func traps()  -> [UInt32: UInt8] {
        return try!  FfiConverterDictionaryUInt32UInt8.lift(
            try! 
    rustCall() {
    
    uniffi_libiguana_fn_method_iguanaenvironment_traps(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func writeMemory(word: Data, address: UInt32) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_write_memory(self.uniffiClonePointer(), 
        FfiConverterData.lower(word),
        FfiConverterUInt32.lower(address),$0
    )
}
    }
    public func writeToTerminal(message: Data) throws  {
        try 
    rustCallWithError(FfiConverterTypeLibiguanaError.lift) {
    uniffi_libiguana_fn_method_iguanaenvironment_write_to_terminal(self.uniffiClonePointer(), 
        FfiConverterData.lower(message),$0
    )
}
    }

}

public struct FfiConverterTypeIguanaEnvironment: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IguanaEnvironment

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IguanaEnvironment {
        return IguanaEnvironment(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IguanaEnvironment) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IguanaEnvironment {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IguanaEnvironment, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeIguanaEnvironment_lift(_ pointer: UnsafeMutableRawPointer) throws -> IguanaEnvironment {
    return try FfiConverterTypeIguanaEnvironment.lift(pointer)
}

public func FfiConverterTypeIguanaEnvironment_lower(_ value: IguanaEnvironment) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIguanaEnvironment.lower(value)
}


public struct AasmOutput {
    public var kmd: String
    public var aasmTerminal: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        kmd: String, 
        aasmTerminal: String) {
        self.kmd = kmd
        self.aasmTerminal = aasmTerminal
    }
}


extension AasmOutput: Equatable, Hashable {
    public static func ==(lhs: AasmOutput, rhs: AasmOutput) -> Bool {
        if lhs.kmd != rhs.kmd {
            return false
        }
        if lhs.aasmTerminal != rhs.aasmTerminal {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kmd)
        hasher.combine(aasmTerminal)
    }
}


public struct FfiConverterTypeAasmOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AasmOutput {
        return
            try AasmOutput(
                kmd: FfiConverterString.read(from: &buf), 
                aasmTerminal: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AasmOutput, into buf: inout [UInt8]) {
        FfiConverterString.write(value.kmd, into: &buf)
        FfiConverterString.write(value.aasmTerminal, into: &buf)
    }
}


public func FfiConverterTypeAasmOutput_lift(_ buf: RustBuffer) throws -> AasmOutput {
    return try FfiConverterTypeAasmOutput.lift(buf)
}

public func FfiConverterTypeAasmOutput_lower(_ value: AasmOutput) -> RustBuffer {
    return FfiConverterTypeAasmOutput.lower(value)
}


public struct BoardState {
    public var status: Status
    public var stepsRemaining: UInt32
    public var stepsSinceReset: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        status: Status, 
        stepsRemaining: UInt32, 
        stepsSinceReset: UInt32) {
        self.status = status
        self.stepsRemaining = stepsRemaining
        self.stepsSinceReset = stepsSinceReset
    }
}


extension BoardState: Equatable, Hashable {
    public static func ==(lhs: BoardState, rhs: BoardState) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.stepsRemaining != rhs.stepsRemaining {
            return false
        }
        if lhs.stepsSinceReset != rhs.stepsSinceReset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(stepsRemaining)
        hasher.combine(stepsSinceReset)
    }
}


public struct FfiConverterTypeBoardState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BoardState {
        return
            try BoardState(
                status: FfiConverterTypeStatus.read(from: &buf), 
                stepsRemaining: FfiConverterUInt32.read(from: &buf), 
                stepsSinceReset: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: BoardState, into buf: inout [UInt8]) {
        FfiConverterTypeStatus.write(value.status, into: &buf)
        FfiConverterUInt32.write(value.stepsRemaining, into: &buf)
        FfiConverterUInt32.write(value.stepsSinceReset, into: &buf)
    }
}


public func FfiConverterTypeBoardState_lift(_ buf: RustBuffer) throws -> BoardState {
    return try FfiConverterTypeBoardState.lift(buf)
}

public func FfiConverterTypeBoardState_lower(_ value: BoardState) -> RustBuffer {
    return FfiConverterTypeBoardState.lower(value)
}


public struct KmdparseLabel {
    /**
     * The name of the label
     */
    public var name: String
    /**
     * The associated memory address of the label
     */
    public var memoryAddress: UInt32
    /**
     * Whether or not the label is global (true for global, false for local)
     */
    public var isExported: Bool
    /**
     * Whether or not the label points to a Thumb instruction
     */
    public var isThumb: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The name of the label
         */
        name: String, 
        /**
         * The associated memory address of the label
         */
        memoryAddress: UInt32, 
        /**
         * Whether or not the label is global (true for global, false for local)
         */
        isExported: Bool, 
        /**
         * Whether or not the label points to a Thumb instruction
         */
        isThumb: Bool) {
        self.name = name
        self.memoryAddress = memoryAddress
        self.isExported = isExported
        self.isThumb = isThumb
    }
}


extension KmdparseLabel: Equatable, Hashable {
    public static func ==(lhs: KmdparseLabel, rhs: KmdparseLabel) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.memoryAddress != rhs.memoryAddress {
            return false
        }
        if lhs.isExported != rhs.isExported {
            return false
        }
        if lhs.isThumb != rhs.isThumb {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(memoryAddress)
        hasher.combine(isExported)
        hasher.combine(isThumb)
    }
}


public struct FfiConverterTypeKmdparseLabel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KmdparseLabel {
        return
            try KmdparseLabel(
                name: FfiConverterString.read(from: &buf), 
                memoryAddress: FfiConverterUInt32.read(from: &buf), 
                isExported: FfiConverterBool.read(from: &buf), 
                isThumb: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: KmdparseLabel, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt32.write(value.memoryAddress, into: &buf)
        FfiConverterBool.write(value.isExported, into: &buf)
        FfiConverterBool.write(value.isThumb, into: &buf)
    }
}


public func FfiConverterTypeKmdparseLabel_lift(_ buf: RustBuffer) throws -> KmdparseLabel {
    return try FfiConverterTypeKmdparseLabel.lift(buf)
}

public func FfiConverterTypeKmdparseLabel_lower(_ value: KmdparseLabel) -> RustBuffer {
    return FfiConverterTypeKmdparseLabel.lower(value)
}


public struct KmdparseLine {
    public var memoryAddress: UInt32?
    public var word: KmdparseWord?
    public var comment: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        memoryAddress: UInt32?, 
        word: KmdparseWord?, 
        comment: String) {
        self.memoryAddress = memoryAddress
        self.word = word
        self.comment = comment
    }
}


extension KmdparseLine: Equatable, Hashable {
    public static func ==(lhs: KmdparseLine, rhs: KmdparseLine) -> Bool {
        if lhs.memoryAddress != rhs.memoryAddress {
            return false
        }
        if lhs.word != rhs.word {
            return false
        }
        if lhs.comment != rhs.comment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(memoryAddress)
        hasher.combine(word)
        hasher.combine(comment)
    }
}


public struct FfiConverterTypeKmdparseLine: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KmdparseLine {
        return
            try KmdparseLine(
                memoryAddress: FfiConverterOptionUInt32.read(from: &buf), 
                word: FfiConverterOptionTypeKmdparseWord.read(from: &buf), 
                comment: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: KmdparseLine, into buf: inout [UInt8]) {
        FfiConverterOptionUInt32.write(value.memoryAddress, into: &buf)
        FfiConverterOptionTypeKmdparseWord.write(value.word, into: &buf)
        FfiConverterString.write(value.comment, into: &buf)
    }
}


public func FfiConverterTypeKmdparseLine_lift(_ buf: RustBuffer) throws -> KmdparseLine {
    return try FfiConverterTypeKmdparseLine.lift(buf)
}

public func FfiConverterTypeKmdparseLine_lower(_ value: KmdparseLine) -> RustBuffer {
    return FfiConverterTypeKmdparseLine.lower(value)
}


public struct Registers {
    public var r0: UInt32
    public var r1: UInt32
    public var r2: UInt32
    public var r3: UInt32
    public var r4: UInt32
    public var r5: UInt32
    public var r6: UInt32
    public var r7: UInt32
    public var r8: UInt32
    public var r9: UInt32
    public var r10: UInt32
    public var r11: UInt32
    public var r12: UInt32
    public var r13: UInt32
    public var r14: UInt32
    public var pc: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        r0: UInt32, 
        r1: UInt32, 
        r2: UInt32, 
        r3: UInt32, 
        r4: UInt32, 
        r5: UInt32, 
        r6: UInt32, 
        r7: UInt32, 
        r8: UInt32, 
        r9: UInt32, 
        r10: UInt32, 
        r11: UInt32, 
        r12: UInt32, 
        r13: UInt32, 
        r14: UInt32, 
        pc: UInt32) {
        self.r0 = r0
        self.r1 = r1
        self.r2 = r2
        self.r3 = r3
        self.r4 = r4
        self.r5 = r5
        self.r6 = r6
        self.r7 = r7
        self.r8 = r8
        self.r9 = r9
        self.r10 = r10
        self.r11 = r11
        self.r12 = r12
        self.r13 = r13
        self.r14 = r14
        self.pc = pc
    }
}


extension Registers: Equatable, Hashable {
    public static func ==(lhs: Registers, rhs: Registers) -> Bool {
        if lhs.r0 != rhs.r0 {
            return false
        }
        if lhs.r1 != rhs.r1 {
            return false
        }
        if lhs.r2 != rhs.r2 {
            return false
        }
        if lhs.r3 != rhs.r3 {
            return false
        }
        if lhs.r4 != rhs.r4 {
            return false
        }
        if lhs.r5 != rhs.r5 {
            return false
        }
        if lhs.r6 != rhs.r6 {
            return false
        }
        if lhs.r7 != rhs.r7 {
            return false
        }
        if lhs.r8 != rhs.r8 {
            return false
        }
        if lhs.r9 != rhs.r9 {
            return false
        }
        if lhs.r10 != rhs.r10 {
            return false
        }
        if lhs.r11 != rhs.r11 {
            return false
        }
        if lhs.r12 != rhs.r12 {
            return false
        }
        if lhs.r13 != rhs.r13 {
            return false
        }
        if lhs.r14 != rhs.r14 {
            return false
        }
        if lhs.pc != rhs.pc {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(r0)
        hasher.combine(r1)
        hasher.combine(r2)
        hasher.combine(r3)
        hasher.combine(r4)
        hasher.combine(r5)
        hasher.combine(r6)
        hasher.combine(r7)
        hasher.combine(r8)
        hasher.combine(r9)
        hasher.combine(r10)
        hasher.combine(r11)
        hasher.combine(r12)
        hasher.combine(r13)
        hasher.combine(r14)
        hasher.combine(pc)
    }
}


public struct FfiConverterTypeRegisters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Registers {
        return
            try Registers(
                r0: FfiConverterUInt32.read(from: &buf), 
                r1: FfiConverterUInt32.read(from: &buf), 
                r2: FfiConverterUInt32.read(from: &buf), 
                r3: FfiConverterUInt32.read(from: &buf), 
                r4: FfiConverterUInt32.read(from: &buf), 
                r5: FfiConverterUInt32.read(from: &buf), 
                r6: FfiConverterUInt32.read(from: &buf), 
                r7: FfiConverterUInt32.read(from: &buf), 
                r8: FfiConverterUInt32.read(from: &buf), 
                r9: FfiConverterUInt32.read(from: &buf), 
                r10: FfiConverterUInt32.read(from: &buf), 
                r11: FfiConverterUInt32.read(from: &buf), 
                r12: FfiConverterUInt32.read(from: &buf), 
                r13: FfiConverterUInt32.read(from: &buf), 
                r14: FfiConverterUInt32.read(from: &buf), 
                pc: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Registers, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.r0, into: &buf)
        FfiConverterUInt32.write(value.r1, into: &buf)
        FfiConverterUInt32.write(value.r2, into: &buf)
        FfiConverterUInt32.write(value.r3, into: &buf)
        FfiConverterUInt32.write(value.r4, into: &buf)
        FfiConverterUInt32.write(value.r5, into: &buf)
        FfiConverterUInt32.write(value.r6, into: &buf)
        FfiConverterUInt32.write(value.r7, into: &buf)
        FfiConverterUInt32.write(value.r8, into: &buf)
        FfiConverterUInt32.write(value.r9, into: &buf)
        FfiConverterUInt32.write(value.r10, into: &buf)
        FfiConverterUInt32.write(value.r11, into: &buf)
        FfiConverterUInt32.write(value.r12, into: &buf)
        FfiConverterUInt32.write(value.r13, into: &buf)
        FfiConverterUInt32.write(value.r14, into: &buf)
        FfiConverterUInt32.write(value.pc, into: &buf)
    }
}


public func FfiConverterTypeRegisters_lift(_ buf: RustBuffer) throws -> Registers {
    return try FfiConverterTypeRegisters.lift(buf)
}

public func FfiConverterTypeRegisters_lower(_ value: Registers) -> RustBuffer {
    return FfiConverterTypeRegisters.lower(value)
}


/**
 * A wrapper around yaxpeax's `DecoderError` so that it can be passed through uniffi
 */
public enum DecoderError {

    
    
    case DecodeError(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeDecoderError.lift(error)
    }
}


public struct FfiConverterTypeDecoderError: FfiConverterRustBuffer {
    typealias SwiftType = DecoderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecoderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DecoderError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension DecoderError: Equatable, Hashable {}

extension DecoderError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum KmdparseToken {
    
    case tag
    case line(
        line: KmdparseLine
    )
    case label(
        label: KmdparseLabel
    )
}

public struct FfiConverterTypeKmdparseToken: FfiConverterRustBuffer {
    typealias SwiftType = KmdparseToken

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KmdparseToken {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .tag
        
        case 2: return .line(
            line: try FfiConverterTypeKmdparseLine.read(from: &buf)
        )
        
        case 3: return .label(
            label: try FfiConverterTypeKmdparseLabel.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KmdparseToken, into buf: inout [UInt8]) {
        switch value {
        
        
        case .tag:
            writeInt(&buf, Int32(1))
        
        
        case let .line(line):
            writeInt(&buf, Int32(2))
            FfiConverterTypeKmdparseLine.write(line, into: &buf)
            
        
        case let .label(label):
            writeInt(&buf, Int32(3))
            FfiConverterTypeKmdparseLabel.write(label, into: &buf)
            
        }
    }
}


public func FfiConverterTypeKmdparseToken_lift(_ buf: RustBuffer) throws -> KmdparseToken {
    return try FfiConverterTypeKmdparseToken.lift(buf)
}

public func FfiConverterTypeKmdparseToken_lower(_ value: KmdparseToken) -> RustBuffer {
    return FfiConverterTypeKmdparseToken.lower(value)
}


extension KmdparseToken: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum KmdparseWord {
    
    /**
     * An instruction, represented as 4 bytes. kmdparse handles flipping the bytes, so that
     * instructions are the right way around.
     */
    case instruction(
        instruction: U84Arr
    )
    case data(
        data: Data
    )
}

public struct FfiConverterTypeKmdparseWord: FfiConverterRustBuffer {
    typealias SwiftType = KmdparseWord

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KmdparseWord {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .instruction(
            instruction: try FfiConverterTypeU84Arr.read(from: &buf)
        )
        
        case 2: return .data(
            data: try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KmdparseWord, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .instruction(instruction):
            writeInt(&buf, Int32(1))
            FfiConverterTypeU84Arr.write(instruction, into: &buf)
            
        
        case let .data(data):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(data, into: &buf)
            
        }
    }
}


public func FfiConverterTypeKmdparseWord_lift(_ buf: RustBuffer) throws -> KmdparseWord {
    return try FfiConverterTypeKmdparseWord.lift(buf)
}

public func FfiConverterTypeKmdparseWord_lower(_ value: KmdparseWord) -> RustBuffer {
    return FfiConverterTypeKmdparseWord.lower(value)
}


extension KmdparseWord: Equatable, Hashable {}




public enum LibiguanaError {

    
    
    case NoStdin(message: String)
    
    case NoStdout(message: String)
    
    case Io(message: String)
    
    case Utf8Error(message: String)
    
    case ParseError(message: String)
    
    case IntegerOverflow(message: String)
    
    case TryFromSliceError(message: String)
    
    case InvalidStatus(message: String)
    
    case InvalidRegisterBufferLength(message: String)
    
    case AasmDoesNotExist(message: String)
    
    case FromUtf8Error(message: String)
    
    case MnemonicsDoesNotExist(message: String)
    
    case TooManyTraps(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeLibiguanaError.lift(error)
    }
}


public struct FfiConverterTypeLibiguanaError: FfiConverterRustBuffer {
    typealias SwiftType = LibiguanaError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LibiguanaError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NoStdin(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .NoStdout(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Io(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .Utf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .ParseError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .IntegerOverflow(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .TryFromSliceError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .InvalidStatus(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .InvalidRegisterBufferLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .AasmDoesNotExist(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .FromUtf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .MnemonicsDoesNotExist(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .TooManyTraps(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LibiguanaError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .NoStdin(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .NoStdout(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Io(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .Utf8Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .ParseError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .IntegerOverflow(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .TryFromSliceError(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .InvalidStatus(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .InvalidRegisterBufferLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .AasmDoesNotExist(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .FromUtf8Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .MnemonicsDoesNotExist(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .TooManyTraps(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))

        
        }
    }
}


extension LibiguanaError: Equatable, Hashable {}

extension LibiguanaError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Status {
    
    case normal
    case busy
    case stopped
    case breakpoint
    case memfault
    case finished
    case running
    case runningSwi
    case stepping
    case broken
}

public struct FfiConverterTypeStatus: FfiConverterRustBuffer {
    typealias SwiftType = Status

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Status {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .normal
        
        case 2: return .busy
        
        case 3: return .stopped
        
        case 4: return .breakpoint
        
        case 5: return .memfault
        
        case 6: return .finished
        
        case 7: return .running
        
        case 8: return .runningSwi
        
        case 9: return .stepping
        
        case 10: return .broken
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Status, into buf: inout [UInt8]) {
        switch value {
        
        
        case .normal:
            writeInt(&buf, Int32(1))
        
        
        case .busy:
            writeInt(&buf, Int32(2))
        
        
        case .stopped:
            writeInt(&buf, Int32(3))
        
        
        case .breakpoint:
            writeInt(&buf, Int32(4))
        
        
        case .memfault:
            writeInt(&buf, Int32(5))
        
        
        case .finished:
            writeInt(&buf, Int32(6))
        
        
        case .running:
            writeInt(&buf, Int32(7))
        
        
        case .runningSwi:
            writeInt(&buf, Int32(8))
        
        
        case .stepping:
            writeInt(&buf, Int32(9))
        
        
        case .broken:
            writeInt(&buf, Int32(10))
        
        }
    }
}


public func FfiConverterTypeStatus_lift(_ buf: RustBuffer) throws -> Status {
    return try FfiConverterTypeStatus.lift(buf)
}

public func FfiConverterTypeStatus_lower(_ value: Status) -> RustBuffer {
    return FfiConverterTypeStatus.lower(value)
}


extension Status: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeKmdparseWord: FfiConverterRustBuffer {
    typealias SwiftType = KmdparseWord?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeKmdparseWord.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeKmdparseWord.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeKmdparseToken: FfiConverterRustBuffer {
    typealias SwiftType = [KmdparseToken]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeKmdparseToken.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeKmdparseToken.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeKmdparseToken: FfiConverterRustBuffer {
    typealias SwiftType = [KmdparseToken]

    public static func write(_ value: [KmdparseToken], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKmdparseToken.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [KmdparseToken] {
        let len: Int32 = try readInt(&buf)
        var seq = [KmdparseToken]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeKmdparseToken.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryUInt32UInt8: FfiConverterRustBuffer {
    public static func write(_ value: [UInt32: UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterUInt32.write(key, into: &buf)
            FfiConverterUInt8.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32: UInt8] {
        let len: Int32 = try readInt(&buf)
        var dict = [UInt32: UInt8]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterUInt32.read(from: &buf)
            let value = try FfiConverterUInt8.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias U84Arr = UInt32
public struct FfiConverterTypeU84Arr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> U84Arr {
        return try FfiConverterUInt32.read(from: &buf)
    }

    public static func write(_ value: U84Arr, into buf: inout [UInt8]) {
        return FfiConverterUInt32.write(value, into: &buf)
    }

    public static func lift(_ value: UInt32) throws -> U84Arr {
        return try FfiConverterUInt32.lift(value)
    }

    public static func lower(_ value: U84Arr) -> UInt32 {
        return FfiConverterUInt32.lower(value)
    }
}


public func FfiConverterTypeU84Arr_lift(_ value: UInt32) throws -> U84Arr {
    return try FfiConverterTypeU84Arr.lift(value)
}

public func FfiConverterTypeU84Arr_lower(_ value: U84Arr) -> UInt32 {
    return FfiConverterTypeU84Arr.lower(value)
}

/**
 * Decodes the given word into an ARM instruction. I'd rather have this contained in a struct, but
 * uniffi doesn't like associated functions.
 */
public func decodeInstruction(word: UInt32) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeDecoderError.lift) {
    uniffi_libiguana_fn_func_decode_instruction(
        FfiConverterUInt32.lower(word),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_libiguana_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_libiguana_checksum_func_decode_instruction() != 56991) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_compile_aasm() != 10926) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_continue_execution() != 23014) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_create_breakpoint() != 48333) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_current_kmd() != 35263) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_kill_jimulator() != 33920) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_load_kmd() != 22342) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_pause() != 58650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_ping() != 59828) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_read_memory() != 17589) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_registers() != 16837) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_remove_breakpoint() != 376) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_reset() != 26955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_start_execution() != 23522) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_status() != 323) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_stop_execution() != 65075) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_terminal_messages() != 17204) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_traps() != 27473) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_write_memory() != 50207) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_method_iguanaenvironment_write_to_terminal() != 60127) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_libiguana_checksum_constructor_iguanaenvironment_new() != 31406) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}